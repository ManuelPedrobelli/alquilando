// <auto-generated />
using System;
using AlquileresApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AlquileresApp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250814155325_PendingChanges")]
    partial class PendingChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Calificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCalificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("integer");

                    b.Property<int>("Puntuacion")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PropiedadId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Calificaciones");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PropiedadId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Imagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PropiedadId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PropiedadId");

                    b.ToTable("Imagenes");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.PreguntaFrecuente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PreguntasFrecuentes");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Promocion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaFinReserva")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicioReserva")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PorcentajeDescuento")
                        .HasColumnType("numeric");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("borrada")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Promociones");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Propiedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CalificacionPromedio")
                        .HasColumnType("double precision");

                    b.Property<int>("Capacidad")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Destacada")
                        .HasColumnType("boolean");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EncargadoId")
                        .HasColumnType("integer");

                    b.Property<double>("Latitud")
                        .HasColumnType("double precision");

                    b.Property<string>("Localidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Longitud")
                        .HasColumnType("double precision");

                    b.Property<decimal>("MontoAPagar")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MontoPagoAnticipado")
                        .HasColumnType("numeric");

                    b.Property<bool>("NoHabitable")
                        .HasColumnType("boolean");

                    b.Property<int>("PoliticaCancelacion")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecioPorNoche")
                        .HasColumnType("numeric");

                    b.PrimitiveCollection<int[]>("ServiciosDisponibles")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("TipoPago")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Propiedades");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadHuespedes")
                        .HasColumnType("integer");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("EmpleadoQueRealizoCheckOutId")
                        .HasColumnType("integer");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaCheckOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MontoAPagar")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MontoRestante")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PrecioTotal")
                        .HasColumnType("numeric");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoPago")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PropiedadId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Tarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<string>("FechaVencimiento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroTarjeta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("numeric");

                    b.Property<string>("Titular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rol")
                        .HasColumnType("integer");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<int>("Rol");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PromocionPropiedad", b =>
                {
                    b.Property<int>("PromocionesId")
                        .HasColumnType("integer");

                    b.Property<int>("PropiedadesId")
                        .HasColumnType("integer");

                    b.HasKey("PromocionesId", "PropiedadesId");

                    b.HasIndex("PropiedadesId");

                    b.ToTable("PromocionPropiedad");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Administrador", b =>
                {
                    b.HasBaseType("AlquileresApp.Core.Entidades.Usuario");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Cliente", b =>
                {
                    b.HasBaseType("AlquileresApp.Core.Entidades.Usuario");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Encargado", b =>
                {
                    b.HasBaseType("AlquileresApp.Core.Entidades.Usuario");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Calificacion", b =>
                {
                    b.HasOne("AlquileresApp.Core.Entidades.Propiedad", "Propiedad")
                        .WithMany("Calificaciones")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlquileresApp.Core.Entidades.Usuario", "Usuario")
                        .WithMany("CalificacionesRealizadas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Propiedad");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Comentario", b =>
                {
                    b.HasOne("AlquileresApp.Core.Entidades.Propiedad", "Propiedad")
                        .WithMany("Comentarios")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlquileresApp.Core.Entidades.Usuario", "Usuario")
                        .WithMany("ComentariosRealizados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Propiedad");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Imagen", b =>
                {
                    b.HasOne("AlquileresApp.Core.Entidades.Propiedad", "Propiedad")
                        .WithMany("Imagenes")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Reserva", b =>
                {
                    b.HasOne("AlquileresApp.Core.Entidades.Cliente", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlquileresApp.Core.Entidades.Propiedad", "Propiedad")
                        .WithMany("Reservas")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Tarjeta", b =>
                {
                    b.HasOne("AlquileresApp.Core.Entidades.Cliente", null)
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PromocionPropiedad", b =>
                {
                    b.HasOne("AlquileresApp.Core.Entidades.Promocion", null)
                        .WithMany()
                        .HasForeignKey("PromocionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlquileresApp.Core.Entidades.Propiedad", null)
                        .WithMany()
                        .HasForeignKey("PropiedadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Propiedad", b =>
                {
                    b.Navigation("Calificaciones");

                    b.Navigation("Comentarios");

                    b.Navigation("Imagenes");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Usuario", b =>
                {
                    b.Navigation("CalificacionesRealizadas");

                    b.Navigation("ComentariosRealizados");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Cliente", b =>
                {
                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
